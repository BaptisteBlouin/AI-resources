name: 🚀 Auto-Add Resource

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  add-resource:
    if: github.event.action == 'labeled' && github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Debug event information
        run: |
          echo "=== Event Debug Information ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Label name: '${{ github.event.label.name }}'"
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue labels:"
          echo '${{ toJSON(github.event.issue.labels) }}'
          echo "=============================="
          
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          pip install pyyaml
          
      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: 🔍 Debug Git and Token permissions
        run: |
          echo "Git config:"
          git config --list
          echo "Current branch:"
          git branch
          echo "Remote:"
          git remote -v
          echo "Token permissions test:"
          curl -H "Authorization: token $PERSONAL_GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          
      - name: 📋 Parse issue and extract resource data
        id: parse-issue
        run: |
          python3 << 'EOF'
          import os
          import re
          import json
          import yaml
          
          # Get issue body from environment
          issue_body = """${{ github.event.issue.body }}"""
          issue_number = "${{ github.event.issue.number }}"
          issue_title = "${{ github.event.issue.title }}"
          
          print("=== Issue Body ===")
          print(issue_body)
          print("==================")
          
          # Parse issue body to extract resource data
          def extract_field(body, field_name):
              # Look for the field pattern in the structured format
              pattern = rf"### {field_name}.*?\n\n(.*?)(?=\n\n###|\n\n---|\Z)"
              match = re.search(pattern, body, re.DOTALL | re.IGNORECASE)
              if match:
                  return match.group(1).strip()
              return ""
          
          # Extract resource data
          name = extract_field(issue_body, "Resource Name")
          url = extract_field(issue_body, "URL") 
          description = extract_field(issue_body, "Description")
          tags_raw = extract_field(issue_body, "Tags")
          
          # Clean and parse tags
          if tags_raw:
              tags = [tag.strip() for tag in tags_raw.split(',') if tag.strip()]
          else:
              tags = []
          
          # Validate required fields
          if not all([name, url, description, tags]):
              print("❌ Missing required fields:")
              print(f"Name: {name}")
              print(f"URL: {url}")
              print(f"Description: {description}")
              print(f"Tags: {tags}")
              exit(1)
          
          # Create resource YAML entry
          resource = {
              'name': name,
              'url': url,
              'description': description,
              'tags': tags
          }
          
          # Generate YAML entry manually to match the exact format of the file
          tags_json = json.dumps(tags)
          yaml_entry = f"""  - name: "{name}"
    url: "{url}"
    description: "{description}"
    tags: {tags_json}
    """
          
          print("=== Generated YAML ===")
          print(yaml_entry)
          print("======================")
          
          # Write outputs for next steps
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"resource-name={name}\n")
              f.write(f"resource-url={url}\n")
              f.write(f"resource-description={description}\n")
              f.write(f"resource-tags={','.join(tags)}\n")
              f.write(f"yaml-entry<<EOF\n{yaml_entry}\nEOF\n")
              f.write(f"issue-number={issue_number}\n")
          
          print("✅ Resource data extracted successfully")
          EOF
          
      - name: 📝 Add resource to resources.yml
        run: |
          echo "Adding resource to resources.yml..."
          
          # Append the new resource to the end of resources.yml
          cat >> resources.yml << 'EOF'
          ${{ steps.parse-issue.outputs.yaml-entry }}
          EOF
          
          echo "✅ Resource added to resources.yml"
          
      - name: 🔄 Generate README and update resources
        run: |
          echo "Running generate_readme.py..."
          cd scripts
          python3 generate_readme.py
          cd ..
          echo "✅ README and resources updated"
          
      - name: 🧹 Clean workspace and prepare files
        run: |
          echo "Resetting all changes first..."
          git reset --hard HEAD
          git clean -fd
          
          echo "Re-adding the resource to resources.yml..."
          cat >> resources.yml << 'EOF'
          ${{ steps.parse-issue.outputs.yaml-entry }}
          EOF
          
          echo "Re-running generate_readme.py..."
          cd scripts
          python3 generate_readme.py
          cd ..
          
          # Force reset any workflow file changes
          git checkout HEAD -- .github/workflows/ || true
          git reset HEAD -- .github/workflows/ || true
          
          echo "=== Final status check ==="
          git status --porcelain
          echo "=========================="
          
      - name: 🔄 Manual commit and push
        run: |
          # Create new branch
          BRANCH_NAME="add-resource-${{ steps.parse-issue.outputs.issue-number }}"
          git checkout -b $BRANCH_NAME
          
          # Aggressively reset all workflow changes
          echo "Resetting workflow files..."
          git checkout HEAD -- '.github/**' || true
          git reset HEAD -- '.github/**' || true
          git clean -fd .github/ || true
          
          # Check what files have changed after reset
          echo "=== Git Status After Reset ==="
          git status --porcelain
          echo "=============================="
          
          # Stage only the specific files we want to commit, one by one
          echo "Staging target files individually..."
          
          if [ -f "resources.yml" ]; then
            git add resources.yml
            echo "✓ Staged resources.yml"
          fi
          
          if [ -f "README.md" ]; then
            git add README.md
            echo "✓ Staged README.md"
          fi
          
          if [ -f "docs/resources.json" ]; then
            git add docs/resources.json
            echo "✓ Staged docs/resources.json"
          fi
          
          if [ -f "scripts/url_index.json" ]; then
            git add scripts/url_index.json
            echo "✓ Staged scripts/url_index.json"
          fi
          
          # Final check - make sure no workflow files are staged
          echo "=== Final staged files check ==="
          STAGED_FILES=$(git diff --cached --name-only)
          echo "$STAGED_FILES"
          
          # Abort if any .github files are staged
          if echo "$STAGED_FILES" | grep -q "^\.github/"; then
            echo "❌ ERROR: Workflow files detected in staged changes!"
            echo "Staged .github files:"
            echo "$STAGED_FILES" | grep "^\.github/"
            exit 1
          fi
          echo "✓ No workflow files in staged changes"
          echo "====================================="
          
          # Commit changes
          git commit -m "Add resource: ${{ steps.parse-issue.outputs.resource-name }}

          - Name: ${{ steps.parse-issue.outputs.resource-name }}
          - URL: ${{ steps.parse-issue.outputs.resource-url }}
          - Tags: ${{ steps.parse-issue.outputs.resource-tags }}

          Auto-generated from issue #${{ steps.parse-issue.outputs.issue-number }}"
          
          # Push branch
          git push https://x-access-token:${{ secrets.PERSONAL_GITHUB_TOKEN }}@github.com/${{ github.repository }} $BRANCH_NAME

          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          
      - name: 📊 Create Pull Request via API
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Add resource: ${{ steps.parse-issue.outputs.resource-name }}",
              head: "add-resource-${{ steps.parse-issue.outputs.issue-number }}",
              base: "main",
              body: `## 🚀 Auto-generated resource addition
              
              This PR automatically adds a new resource based on the approved submission in issue #${{ steps.parse-issue.outputs.issue-number }}.
              
              ### 📋 Resource Details
              - **Name**: ${{ steps.parse-issue.outputs.resource-name }}
              - **URL**: ${{ steps.parse-issue.outputs.resource-url }}
              - **Description**: ${{ steps.parse-issue.outputs.resource-description }}
              - **Tags**: ${{ steps.parse-issue.outputs.resource-tags }}
              
              ### ✅ Automated Actions Completed
              - [x] Resource added to \`resources.yml\`
              - [x] README.md regenerated
              - [x] Resources index updated
              - [x] URL validation completed
              
              **Source**: Issue #${{ steps.parse-issue.outputs.issue-number }}
              **Auto-generated**: ${{ github.run_id }}`
            });
            
            console.log(\`Created PR #\${pullRequest.number}\`);
            return pullRequest.number;
          
      - name: 📝 Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.parse-issue.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Resource Processing Complete!
              
              ✅ Your resource has been automatically processed and a pull request has been created.
              
              **What happened:**
              - Resource added to \`resources.yml\`
              - README.md regenerated
              - Pull request created for review
              
              **Next steps:**
              - The pull request will be reviewed and merged
              - Your resource will appear in the collection shortly
              
              Thank you for contributing to the AI Resources collection! 🎉`
            });
            
            // Close the issue as it's been processed
            github.rest.issues.update({
              issue_number: ${{ steps.parse-issue.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['approved', 'processed']
            });