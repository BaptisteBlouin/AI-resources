name: 📦 Auto-Batch Import Resources

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  batch-import:
    if: github.event.action == 'labeled' && github.event.label.name == 'approved' && contains(github.event.issue.title, '[Batch]')
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Debug batch event information
        run: |
          echo "=== Batch Event Debug Information ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Label name: '${{ github.event.label.name }}'"
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "=============================="
          
      - name: ✋ Check if we should proceed with batch
        run: |
          if [[ "${{ github.event.action }}" != "labeled" ]]; then
            echo "❌ Skipping: Action is '${{ github.event.action }}', not 'labeled'"
            exit 1
          fi
          
          if [[ "${{ github.event.label.name }}" != "approved" ]]; then
            echo "❌ Skipping: Label is '${{ github.event.label.name }}', not 'approved'"
            exit 1
          fi
          
          if [[ "${{ github.event.issue.title }}" != *"[Batch]"* ]]; then
            echo "❌ Skipping: Not a batch import issue"
            exit 1
          fi
          
          echo "✅ Proceeding with batch import"
          
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          pip install pyyaml
          
      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: 📋 Parse batch issue and extract resources
        id: parse-batch
        run: |
          python3 << 'EOF'
          import os
          import re
          import json
          import yaml
          
          issue_body = """${{ github.event.issue.body }}"""
          issue_number = "${{ github.event.issue.number }}"
          issue_title = "${{ github.event.issue.title }}"
          
          print("=== Batch Issue Body ===")
          print(issue_body)
          print("========================")
          
          # Extract YAML resources from issue body
          def extract_yaml_resources(body):
              # Look for the YAML block in the issue
              pattern = r"### Resources YAML.*?\n\s*\n```yaml\n(.*?)\n```"
              match = re.search(pattern, body, re.DOTALL | re.IGNORECASE)
              if match:
                  yaml_content = match.group(1)
              else:
                  # Try without code blocks
                  pattern = r"### Resources YAML.*?\n\s*\n(.*?)(?=\n\s*\n###|\n\s*\n---|\Z)"
                  match = re.search(pattern, body, re.DOTALL | re.IGNORECASE)
                  if match:
                      yaml_content = match.group(1).strip()
                  else:
                      return []
              
              print("=== Found YAML Content ===")
              print(yaml_content)
              print("==========================")
              
              try:
                  resources = yaml.safe_load(yaml_content)
                  if isinstance(resources, list):
                      return resources
                  else:
                      print("❌ YAML content is not a list")
                      return []
              except yaml.YAMLError as e:
                  print(f"❌ YAML parsing error: {e}")
                  return []
          
          resources = extract_yaml_resources(issue_body)
          
          if not resources:
              print("❌ No valid resources found in issue")
              exit(1)
          
          print(f"✅ Found {len(resources)} resources to import")
          
          # Validate each resource
          valid_resources = []
          for i, resource in enumerate(resources):
              if not isinstance(resource, dict):
                  print(f"❌ Resource {i+1} is not a dictionary")
                  continue
                  
              required_fields = ['name', 'url', 'description', 'tags']
              missing_fields = [field for field in required_fields if not resource.get(field)]
              
              if missing_fields:
                  print(f"❌ Resource {i+1} missing fields: {missing_fields}")
                  continue
                  
              # Ensure tags is a list
              if isinstance(resource['tags'], str):
                  resource['tags'] = [tag.strip() for tag in resource['tags'].split(',')]
              elif not isinstance(resource['tags'], list):
                  print(f"❌ Resource {i+1} tags must be a list or comma-separated string")
                  continue
                  
              valid_resources.append(resource)
              print(f"✅ Resource {i+1}: {resource['name']}")
          
          if not valid_resources:
              print("❌ No valid resources found")
              exit(1)
          
          print(f"✅ {len(valid_resources)} resources validated successfully")
          
          # Generate YAML entries for all resources
          batch_yaml = ""
          resource_names = []
          for resource in valid_resources:
              tags_json = json.dumps(resource['tags'])
              yaml_entry = f'  - name: "{resource["name"]}"\n    url: "{resource["url"]}"\n    description: "{resource["description"]}"\n    tags: {tags_json}\n    \n'
              batch_yaml += yaml_entry
              resource_names.append(resource['name'])
          
          print("=== Generated Batch YAML ===")
          print(batch_yaml)
          print("============================")
          
          # Write outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write("batch-yaml<<EOF\n" + batch_yaml + "\nEOF\n")
              f.write("resource-count=" + str(len(valid_resources)) + "\n")
              f.write("resource-names=" + ", ".join(resource_names) + "\n")
              f.write("issue-number=" + issue_number + "\n")
          
          print("✅ Batch resources processed successfully")
          EOF
          
      - name: 📝 Add batch resources to resources.yml
        run: |
          echo "Adding ${{ steps.parse-batch.outputs.resource-count }} resources to resources.yml..."
          
          cat >> resources.yml << 'EOF'
          ${{ steps.parse-batch.outputs.batch-yaml }}
          EOF
          
          echo "✅ Batch resources added to resources.yml"
          
      - name: 🔄 Generate README and update resources
        run: |
          echo "Running generate_readme.py..."
          cd scripts
          python3 generate_readme.py
          cd ..
          echo "✅ README and resources updated"
          
      - name: 🧹 Clean workspace and prepare files
        run: |
          echo "Resetting all changes first..."
          git reset --hard HEAD
          git clean -fd
          
          echo "Re-adding batch resources to resources.yml..."
          cat >> resources.yml << 'EOF'
          ${{ steps.parse-batch.outputs.batch-yaml }}
          EOF
          
          echo "Re-running generate_readme.py..."
          cd scripts
          python3 generate_readme.py
          cd ..
          
          # Force reset any workflow file changes
          git checkout HEAD -- .github/workflows/ || true
          git reset HEAD -- .github/workflows/ || true
          
          echo "=== Final status check ==="
          git status --porcelain
          echo "=========================="
          
      - name: 🔄 Manual commit and push batch
        run: |
          # Create new branch
          BRANCH_NAME="batch-import-${{ steps.parse-batch.outputs.issue-number }}"
          git checkout -b $BRANCH_NAME
          
          # Aggressively reset all workflow changes
          echo "Resetting workflow files..."
          git checkout HEAD -- '.github/**' || true
          git reset HEAD -- '.github/**' || true
          git clean -fd .github/ || true
          
          # Stage target files
          echo "Staging batch import files..."
          
          if [ -f "resources.yml" ]; then
            git add resources.yml
            echo "✓ Staged resources.yml"
          fi
          
          if [ -f "README.md" ]; then
            git add README.md
            echo "✓ Staged README.md"
          fi
          
          if [ -f "docs/resources.json" ]; then
            git add docs/resources.json
            echo "✓ Staged docs/resources.json"
          fi
          
          if [ -f "scripts/url_index.json" ]; then
            git add scripts/url_index.json
            echo "✓ Staged scripts/url_index.json"
          fi
          
          # Final check - make sure no workflow files are staged
          echo "=== Final staged files check ==="
          STAGED_FILES=$(git diff --cached --name-only)
          echo "$STAGED_FILES"
          
          if echo "$STAGED_FILES" | grep -q "^\.github/"; then
            echo "❌ ERROR: Workflow files detected in staged changes!"
            exit 1
          fi
          echo "✓ No workflow files in staged changes"
          
          # Commit changes
          git commit -m "Batch import: Add ${{ steps.parse-batch.outputs.resource-count }} resources

          Resources added:
          ${{ steps.parse-batch.outputs.resource-names }}

          Auto-generated from batch issue #${{ steps.parse-batch.outputs.issue-number }}"
          
          # Push branch
          git push https://x-access-token:${{ secrets.PERSONAL_GITHUB_TOKEN }}@github.com/${{ github.repository }} $BRANCH_NAME
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          
      - name: 📊 Create Batch Pull Request via API
        uses: actions/github-script@v7
        with:
          script: |
            const resourceCount = `${{ steps.parse-batch.outputs.resource-count }}`;
            const resourceNames = `${{ steps.parse-batch.outputs.resource-names }}`;
            const issueNumber = `${{ steps.parse-batch.outputs.issue-number }}`;
            const runId = `${{ github.run_id }}`;
            
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Batch import: Add ${resourceCount} resources`,
              head: `batch-import-${issueNumber}`,
              base: "main",
              body: `## 📦 Auto-generated batch import
              
              This PR automatically adds ${resourceCount} resources from the approved batch submission in issue #${issueNumber}.
              
              ### 📋 Resources Added
              ${resourceNames}
              
              ### ✅ Automated Actions Completed
              - [x] ${resourceCount} resources added to resources.yml
              - [x] README.md regenerated
              - [x] Resources index updated
              - [x] URL validation completed
              
              **Source**: Batch Issue #${issueNumber}
              **Auto-generated**: ${runId}`
            });
            
            console.log('Created batch PR #' + pullRequest.number);
            
            // Auto-merge the batch PR
            console.log('Auto-merging batch PR #' + pullRequest.number);
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
              commit_title: `Batch import: Add ${resourceCount} resources`,
              commit_message: `Auto-merged batch from approved issue #${issueNumber}`,
              merge_method: 'squash'
            });
            
            console.log('Successfully auto-merged batch PR #' + pullRequest.number);
            return pullRequest.number;
          
      - name: 📝 Comment on batch issue
        uses: actions/github-script@v7
        with:
          script: |
            const resourceCount = `${{ steps.parse-batch.outputs.resource-count }}`;
            const resourceNames = `${{ steps.parse-batch.outputs.resource-names }}`;
            const issueNumber = `${{ steps.parse-batch.outputs.issue-number }}`;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📦 Batch Import Successfully Completed!
              
              ✅ Your batch of **${resourceCount} resources** has been automatically processed and **merged into the main collection**!
              
              ### 📋 Resources Added
              ${resourceNames}
              
              **What happened:**
              - ${resourceCount} resources added to \`resources.yml\`
              - README.md regenerated with all new resources
              - Pull request created and automatically merged
              - All resources are now live in the collection
              
              **Your resources are now available at:**
              - Web interface: [AI Resources Collection](https://baptisteblouin.github.io/AI-resources/)
              - GitHub: [resources.yml](https://github.com/BaptisteBlouin/AI-resources/blob/main/resources.yml)
              
              Thank you for contributing ${resourceCount} resources to the AI Resources collection! 🎉`
            });
            
            // Close the issue as it's been processed
            github.rest.issues.update({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['approved', 'processed', 'batch-completed']
            });